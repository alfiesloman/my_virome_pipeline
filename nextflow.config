/*
========================================================================================
    BEST-IN-CLASS VIROME ANALYSIS PIPELINE - CONFIGURATION
========================================================================================
    Author: AI Agent
    Version: 2.0
    Description: Production-ready Nextflow virome pipeline with robust error handling
========================================================================================
*/

// --- PIPELINE METADATA ---
manifest {
    name            = 'virome-pipeline'
    author          = 'AS3243'
    description     = 'Comprehensive virome analysis pipeline'
    version         = '2.0'
    nextflowVersion = '>=23.0.0'
    doi             = ''
    homePage        = ''
}

workDir = "/mnt/scratch/users/as3243/nextflow_work"

// --- PIPELINE PARAMETERS ---
params {
    // Input/Output
    input_dir       = 'data'
    outdir          = 'results'
    tracedir        = "${params.outdir}/pipeline_info"
    
    // Database paths (VERIFIED AND CORRECTED)
    genomad_db      = '/mnt/scratch/projects/biol-soilv-2024/databases/genomad_db'
    iphop_db        = '/mnt/scratch/projects/biol-soilv-2024/virome_assembly/iphop_db/Aug_2023_pub_rw'
    bacphlip_hmmsearch = '/mnt/scratch/users/as3243/miniconda/envs/bacphlip/bin/hmmsearch'
    cluster_one_jar = '/mnt/scratch/users/as3243/miniconda/envs/vcontact2/lib/cluster_one-v1.0.jar'
    checkv_db          = '/mnt/scratch/projects/biol-soilv-2024/checkv-db-v1.5'
    
    // Resource limits
    max_memory      = '120.GB'
    max_cpus        = 32
    max_time        = '48.h'
    
    // Pipeline options
    help            = false
    validate_params = true
    publish_dir_mode = 'copy'
    email           = null
    email_on_fail   = null
    plaintext_email = false
    monochrome_logs = false
    hook_url        = null
    
    // Config options
    custom_config_version = 'master'
    custom_config_base    = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact = null
    config_profile_url = null
    config_profile_name = null
}

// --- EXECUTION PROFILES ---
profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    
    conda {
        conda.enabled          = true
        conda.useMamba         = true
        conda.createTimeout    = '2h'
        singularity.enabled    = false
        docker.enabled         = false
        process.conda          = "$projectDir/conda-envs"
    }
    
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        conda.createTimeout    = '2h'
        singularity.enabled    = false
        docker.enabled         = false
        process.conda          = "$projectDir/conda-envs"
    }
    
    slurm {
        process.executor       = 'slurm'
        process.queue          = 'nodes'
        process.errorStrategy  = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'terminate' }
        process.maxRetries     = 3
        process.memory         = { check_max( 8.GB * task.attempt, 'memory' ) }
        process.time           = { check_max( 4.h * task.attempt, 'time' ) }
        process.cpus           = { check_max( 2 * task.attempt, 'cpus' ) }
        executor.queueSize     = 20
        executor.submitRateLimit = '10 sec'
        // Uncomment if needed: process.clusterOptions = '--account=your-project-account'
    }
    
    test {
        params.input_dir = 'test_data'
        params.outdir = 'test_results'
        params.max_memory = '6.GB'
        params.max_cpus = 2
        params.max_time = '6.h'
    }
    
    viking2 {
        includeConfig 'conf/viking2.config'
    }
}

// --- GLOBAL PROCESS CONFIGURATION ---
process {
    // Global defaults
    cpus   = { check_max( 1 * task.attempt, 'cpus'    ) }
    memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
    time   = { check_max( 4.h * task.attempt, 'time'    ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource allocation
    withName: 'RUN_GENOMAD' {
        cpus          = { check_max( 8 * task.attempt, 'cpus' ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory' ) }
        time          = { check_max( 12.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    
    withName: 'RUN_CHECKV' {
        cpus          = { check_max( 4 * task.attempt, 'cpus' ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory' ) }
        time          = { check_max( 6.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    
    withName: 'RUN_IPHOP' {
        cpus          = { check_max( 16 * task.attempt, 'cpus' ) }
        memory        = { check_max( 64.GB * task.attempt, 'memory' ) }
        time          = { check_max( 24.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries    = 1
    }
    
    withName: 'RUN_BACPHLIP' {
        cpus          = { check_max( 8 * task.attempt, 'cpus' ) }
        memory        = { check_max( 32.GB * task.attempt, 'memory' ) }
        time          = { check_max( 12.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    
    withName: 'RUN_VCONTACT2' {
        cpus          = { check_max( 8 * task.attempt, 'cpus' ) }
        memory        = { check_max( 48.GB * task.attempt, 'memory' ) }
        time          = { check_max( 18.h * task.attempt, 'time' ) }
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}

// --- SOFTWARE MANAGEMENT ---
conda {
    enabled        = true
    useMamba       = true
    createTimeout  = '2h'
    cacheDir    = "/mnt/scratch/users/as3243/.conda_cache/nextflow"
}

singularity {
    enabled        = false
    autoMounts     = true
    cacheDir       = "$HOME/.singularity/nextflow"
}

docker {
    enabled        = false
    userEmulation  = true
}

// --- REPORTING AND MONITORING ---
report {
    enabled = true
    file    = "${params.tracedir}/execution_report.html"
}

timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline.html"
}

trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace.txt"
}

dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag.html"
}

// --- CLEANUP AND OPTIMIZATION ---
cleanup = true
resume  = true

// --- RESOURCE CHECKING FUNCTION ---
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// --- ERROR HANDLING ---
tower {
    accessToken = ''
    enabled     = false
}

// --- NOTIFICATION ---
notification {
    enabled = false
}
